stages:
  - build_android
  - build
  - build_integ

default:
  tags: [famedly, docker, docker-privileged]

workflow:
  rules:
    - if: $CI_COMMIT_BRANCH && $CI_COMMIT_REF_NAME != $CI_DEFAULT_BRANCH
      variables:                              # namespace builds on branches
        VERSION_SUFFIX: "-$CI_COMMIT_REF_SLUG"
    - if: $CI_COMMIT_BRANCH && $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      variables:
        VERSION_SUFFIX: ""

# image for linux-native builds of flutter apps
flutter-linux:
  image: docker:latest
  stage: build
  needs: []
  services:
    - docker:19.03.1-dind
  variables:
    CHANNEL: stable
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - cd linux
    - export IMAGE_NAME="${CI_REGISTRY_IMAGE}/flutter-linux/${CHANNEL}"
    - docker build --pull -t "${IMAGE_NAME}:${FLUTTER_STABLE_VERSION}${VERSION_SUFFIX}" --build-arg flutter_version=$FLUTTER_STABLE_VERSION --build-arg channel=$CHANNEL .
    - docker push "${IMAGE_NAME}:${FLUTTER_STABLE_VERSION}${VERSION_SUFFIX}"

android-base:
  image: docker:latest
  stage: build_android
  services:
    - docker:19.03.1-dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - cd android
    - export IMAGE_NAME="${CI_REGISTRY_IMAGE}/android-base"
    - docker build -t "${IMAGE_NAME}:latest${VERSION_SUFFIX}" .
    - docker push "${IMAGE_NAME}:latest${VERSION_SUFFIX}"

# main consumable image, build in 3 variants corrsponding to the flutter release channels
# based on the android-base image
flutter:
  image: docker:latest
  stage: build
  parallel:
    matrix:
      - CHANNEL: stable
        FLUTTER_VERSION: ${FLUTTER_STABLE_VERSION}
      - CHANNEL: beta
        FLUTTER_VERSION: ${FLUTTER_BETA_VERSION}
      - CHANNEL: dev
        FLUTTER_VERSION: ${FLUTTER_DEV_VERSION}
  services:
    - docker:19.03.1-dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - cd alpine_flutter
    - export IMAGE_NAME="${CI_REGISTRY_IMAGE}/flutter/${CHANNEL}"
    - docker build --pull -t "${IMAGE_NAME}:${FLUTTER_VERSION}${VERSION_SUFFIX}" --build-arg flutter_version=$FLUTTER_STABLE_VERSION --build-arg image_base="${CI_REGISTRY_IMAGE}/android-base:latest${VERSION_SUFFIX}" .
    - docker push "${IMAGE_NAME}:${FLUTTER_VERSION}${VERSION_SUFFIX}"

# "flutter" + emulator tooling
integration:
  image: docker:latest
  stage: build_integ
  services:
    - docker:19.03.1-dind
  variables:
    CHANNEL: stable
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --pull -t "${CI_REGISTRY_IMAGE}/integration/${CHANNEL}:${FLUTTER_STABLE_VERSION}${VERSION_SUFFIX}" --build-arg flutter_image="${CI_REGISTRY_IMAGE}/flutter/${CHANNEL}:${FLUTTER_STABLE_VERSION}${VERSION_SUFFIX}" -f Dockerfile.integrationtests .
    - docker push "${CI_REGISTRY_IMAGE}/integration/${CHANNEL}:${FLUTTER_STABLE_VERSION}${VERSION_SUFFIX}"
